{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\ReactProjects\\\\restaurants\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport axiosInstance from './axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = () => {\n  _s();\n  const mapRef = useRef(null);\n  const [selectedCoordinates, setSelectedCoordinates] = useState(null);\n  const [restaurants, setRestaurants] = useState([]);\n  useEffect(() => {\n    // Create the map instance\n    const map = L.map(mapRef.current);\n\n    // Add the tile layer from OpenStreetMap\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: 'Map data © OpenStreetMap contributors'\n    }).addTo(map);\n\n    // Fetch restaurant data from the backend\n    const fetchRestaurants = async () => {\n      try {\n        const response = await axiosInstance.get('/api/restaurants');\n        const fetchedRestaurants = response.data;\n        setRestaurants(fetchedRestaurants);\n\n        // Iterate over the restaurants and add markers to the map\n        fetchedRestaurants.forEach(restaurant => {\n          const {\n            latitude,\n            longitude\n          } = restaurant;\n\n          // Create a marker and add it to the map\n          L.marker([latitude, longitude]).addTo(map);\n        });\n      } catch (error) {\n        console.error('Error fetching restaurants:', error);\n      }\n    };\n    fetchRestaurants();\n\n    // Get the user's current location\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n\n        // Set the map view to the user's current location\n        map.setView([latitude, longitude], 13);\n      }, error => {\n        console.error('Error getting current location:', error);\n        // Set the default center if user location cannot be obtained\n        map.setView([51.505, -0.09], 13);\n      });\n    } else {\n      // Set the default center if geolocation is not supported\n      map.setView([51.505, -0.09], 13);\n    }\n\n    // Event listener for click event on map\n    const handleMapClick = event => {\n      const {\n        lat,\n        lng\n      } = event.latlng;\n      setSelectedCoordinates({\n        lat,\n        lng\n      }); // Update state with the selected coordinates\n      console.log('Clicked coordinates:', lat, lng);\n    };\n    map.on('click', handleMapClick);\n    return () => {\n      // Clean up the map when the component is unmounted\n      map.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '90%',\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), selectedCoordinates && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Selected Coordinates:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"X: \", selectedCoordinates.lng]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Y: \", selectedCoordinates.lat]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), restaurants.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Restaurants:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: restaurants.map((restaurant, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: restaurant.nom\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"5xmdV4Td73jeACJs+eLFCWvsW9U=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","axiosInstance","jsxDEV","_jsxDEV","Map","_s","mapRef","selectedCoordinates","setSelectedCoordinates","restaurants","setRestaurants","map","current","tileLayer","attribution","addTo","fetchRestaurants","response","get","fetchedRestaurants","data","forEach","restaurant","latitude","longitude","marker","error","console","navigator","geolocation","getCurrentPosition","position","coords","setView","handleMapClick","event","lat","lng","latlng","log","on","remove","className","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","length","index","nom","_c","$RefreshReg$"],"sources":["C:/Users/hp/ReactProjects/restaurants/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport axiosInstance from './axiosInstance';\r\n\r\nconst Map = () => {\r\n  const mapRef = useRef(null);\r\n  const [selectedCoordinates, setSelectedCoordinates] = useState(null);\r\n  const [restaurants, setRestaurants] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Create the map instance\r\n    const map = L.map(mapRef.current);\r\n\r\n    // Add the tile layer from OpenStreetMap\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: 'Map data © OpenStreetMap contributors',\r\n    }).addTo(map);\r\n\r\n    // Fetch restaurant data from the backend\r\n    const fetchRestaurants = async () => {\r\n      try {\r\n        const response = await axiosInstance.get('/api/restaurants');\r\n        const fetchedRestaurants = response.data;\r\n\r\n        setRestaurants(fetchedRestaurants);\r\n\r\n        // Iterate over the restaurants and add markers to the map\r\n        fetchedRestaurants.forEach((restaurant) => {\r\n          const { latitude, longitude } = restaurant;\r\n\r\n          // Create a marker and add it to the map\r\n          L.marker([latitude, longitude]).addTo(map);\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching restaurants:', error);\r\n      }\r\n    };\r\n\r\n    fetchRestaurants();\r\n\r\n    // Get the user's current location\r\n    if ('geolocation' in navigator) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n\r\n          // Set the map view to the user's current location\r\n          map.setView([latitude, longitude], 13);\r\n        },\r\n        (error) => {\r\n          console.error('Error getting current location:', error);\r\n          // Set the default center if user location cannot be obtained\r\n          map.setView([51.505, -0.09], 13);\r\n        }\r\n      );\r\n    } else {\r\n      // Set the default center if geolocation is not supported\r\n      map.setView([51.505, -0.09], 13);\r\n    }\r\n\r\n    // Event listener for click event on map\r\n    const handleMapClick = (event) => {\r\n      const { lat, lng } = event.latlng;\r\n      setSelectedCoordinates({ lat, lng }); // Update state with the selected coordinates\r\n      console.log('Clicked coordinates:', lat, lng);\r\n    };\r\n\r\n    map.on('click', handleMapClick);\r\n\r\n    return () => {\r\n      // Clean up the map when the component is unmounted\r\n      map.remove();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className='container' >\r\n      <div ref={mapRef} style={{ width: '90%', height: '400px' }} />\r\n      {selectedCoordinates && (\r\n        <div>\r\n          Selected Coordinates:\r\n          <ul>\r\n            <li>X: {selectedCoordinates.lng}</li>\r\n            <li>Y: {selectedCoordinates.lat}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {restaurants.length > 0 && (\r\n        <div>\r\n          Restaurants:\r\n          <ul>\r\n            {restaurants.map((restaurant, index) => (\r\n              <li key={index}>{restaurant.nom}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}