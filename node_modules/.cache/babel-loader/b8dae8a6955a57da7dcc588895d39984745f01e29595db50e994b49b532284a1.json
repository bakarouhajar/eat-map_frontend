{"ast":null,"code":"import axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080/',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.request.use(async config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Check if the token is expired\n    const tokenExpiration = decodeTokenExpiration(token);\n    const currentTime = Date.now() / 1000; // Convert to seconds\n    if (tokenExpiration && currentTime >= tokenExpiration) {\n      // Token expired, generate a new one\n      try {\n        const newToken = await generateNewToken(); // Implement your logic to generate a new token\n        localStorage.setItem('token', newToken);\n        config.headers.Authorization = `Bearer ${newToken}`;\n      } catch (error) {\n        // Handle error generating a new token (e.g., redirect to login page)\n        console.error('Error generating new token:', error);\n        // Handle the error as per your application's requirements\n      }\n    } else {\n      // Token is valid, set it in the request headers\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  }\n  return config;\n});\nfunction decodeTokenExpiration(token) {\n  try {\n    const [, payloadBase64] = token.split('.');\n    const payload = JSON.parse(atob(payloadBase64));\n    return payload.exp;\n  } catch (error) {\n    console.error('Error decoding token:', error);\n    return null;\n  }\n}\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","timeout","headers","Accept","interceptors","request","use","config","token","localStorage","getItem","tokenExpiration","decodeTokenExpiration","currentTime","Date","now","newToken","generateNewToken","setItem","Authorization","error","console","payloadBase64","split","payload","JSON","parse","atob","exp"],"sources":["C:/Users/hp/ReactProjects/restaurants/src/components/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://localhost:8080/',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(async (config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Check if the token is expired\r\n    const tokenExpiration = decodeTokenExpiration(token);\r\n    const currentTime = Date.now() / 1000; // Convert to seconds\r\n    if (tokenExpiration && currentTime >= tokenExpiration) {\r\n      // Token expired, generate a new one\r\n      try {\r\n        const newToken = await generateNewToken(); // Implement your logic to generate a new token\r\n        localStorage.setItem('token', newToken);\r\n        config.headers.Authorization = `Bearer ${newToken}`;\r\n      } catch (error) {\r\n        // Handle error generating a new token (e.g., redirect to login page)\r\n        console.error('Error generating new token:', error);\r\n        // Handle the error as per your application's requirements\r\n      }\r\n    } else {\r\n      // Token is valid, set it in the request headers\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n  }\r\n  return config;\r\n});\r\n\r\nfunction decodeTokenExpiration(token) {\r\n  try {\r\n    const [, payloadBase64] = token.split('.');\r\n    const payload = JSON.parse(atob(payloadBase64));\r\n    return payload.exp;\r\n  } catch (error) {\r\n    console.error('Error decoding token:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAEFL,aAAa,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EACvD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT;IACA,MAAMG,eAAe,GAAGC,qBAAqB,CAACJ,KAAK,CAAC;IACpD,MAAMK,WAAW,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IACvC,IAAIJ,eAAe,IAAIE,WAAW,IAAIF,eAAe,EAAE;MACrD;MACA,IAAI;QACF,MAAMK,QAAQ,GAAG,MAAMC,gBAAgB,EAAE,CAAC,CAAC;QAC3CR,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAAC;QACvCT,MAAM,CAACL,OAAO,CAACiB,aAAa,GAAI,UAASH,QAAS,EAAC;MACrD,CAAC,CAAC,OAAOI,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnD;MACF;IACF,CAAC,MAAM;MACL;MACAb,MAAM,CAACL,OAAO,CAACiB,aAAa,GAAI,UAASX,KAAM,EAAC;IAClD;EACF;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,SAASK,qBAAqBA,CAACJ,KAAK,EAAE;EACpC,IAAI;IACF,MAAM,GAAGc,aAAa,CAAC,GAAGd,KAAK,CAACe,KAAK,CAAC,GAAG,CAAC;IAC1C,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,aAAa,CAAC,CAAC;IAC/C,OAAOE,OAAO,CAACI,GAAG;EACpB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,IAAI;EACb;AACF;AAEA,eAAetB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}