{"ast":null,"code":"import axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080/',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.request.use(async config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Check if the token is expired\n    const tokenExpiration = localStorage.getItem('tokenExpiration');\n    if (tokenExpiration && Date.now() >= parseInt(tokenExpiration)) {\n      // Token has expired, refresh it\n      try {\n        const refreshedToken = await refreshToken(); // Function to refresh the token\n        config.headers.Authorization = `Bearer ${refreshedToken}`;\n      } catch (error) {\n        // Handle error refreshing the token\n        // For example, redirect to login page or show an error message\n      }\n    } else {\n      // Token is still valid, use it as it is\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  }\n  return config;\n});\n\n// Function to refresh the token\nasync function refreshToken() {\n  try {\n    // Make a request to your server endpoint to refresh the token\n    const response = await axiosInstance.post('/refresh-token'); // Replace with your server endpoint\n\n    // Assuming the server responds with a new token\n    const refreshedToken = response.data.token;\n\n    // Update the token and token expiration in localStorage\n    localStorage.setItem('token', refreshedToken);\n    const tokenExpiration = Date.now() + response.data.expiresIn * 1000; // Assuming the server responds with the token expiration in seconds\n    localStorage.setItem('tokenExpiration', tokenExpiration);\n    return refreshedToken;\n  } catch (error) {\n    throw new Error('Failed to refresh token');\n  }\n}\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","timeout","headers","Accept","interceptors","request","use","config","token","localStorage","getItem","tokenExpiration","Date","now","parseInt","refreshedToken","refreshToken","Authorization","error","response","post","data","setItem","expiresIn","Error"],"sources":["C:/Users/hp/ReactProjects/restaurants/src/components/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://localhost:8080/',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(async (config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Check if the token is expired\r\n    const tokenExpiration = localStorage.getItem('tokenExpiration');\r\n    if (tokenExpiration && Date.now() >= parseInt(tokenExpiration)) {\r\n      // Token has expired, refresh it\r\n      try {\r\n        const refreshedToken = await refreshToken(); // Function to refresh the token\r\n        config.headers.Authorization = `Bearer ${refreshedToken}`;\r\n      } catch (error) {\r\n        // Handle error refreshing the token\r\n        // For example, redirect to login page or show an error message\r\n      }\r\n    } else {\r\n      // Token is still valid, use it as it is\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n  }\r\n  return config;\r\n});\r\n\r\n// Function to refresh the token\r\nasync function refreshToken() {\r\n  try {\r\n    // Make a request to your server endpoint to refresh the token\r\n    const response = await axiosInstance.post('/refresh-token'); // Replace with your server endpoint\r\n\r\n    // Assuming the server responds with a new token\r\n    const refreshedToken = response.data.token;\r\n\r\n    // Update the token and token expiration in localStorage\r\n    localStorage.setItem('token', refreshedToken);\r\n    const tokenExpiration = Date.now() + response.data.expiresIn * 1000; // Assuming the server responds with the token expiration in seconds\r\n    localStorage.setItem('tokenExpiration', tokenExpiration);\r\n\r\n    return refreshedToken;\r\n  } catch (error) {\r\n    throw new Error('Failed to refresh token');\r\n  }\r\n}\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAEFL,aAAa,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EACvD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT;IACA,MAAMG,eAAe,GAAGF,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC/D,IAAIC,eAAe,IAAIC,IAAI,CAACC,GAAG,EAAE,IAAIC,QAAQ,CAACH,eAAe,CAAC,EAAE;MAC9D;MACA,IAAI;QACF,MAAMI,cAAc,GAAG,MAAMC,YAAY,EAAE,CAAC,CAAC;QAC7CT,MAAM,CAACL,OAAO,CAACe,aAAa,GAAI,UAASF,cAAe,EAAC;MAC3D,CAAC,CAAC,OAAOG,KAAK,EAAE;QACd;QACA;MAAA;IAEJ,CAAC,MAAM;MACL;MACAX,MAAM,CAACL,OAAO,CAACe,aAAa,GAAI,UAAST,KAAM,EAAC;IAClD;EACF;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,eAAeS,YAAYA,CAAA,EAAG;EAC5B,IAAI;IACF;IACA,MAAMG,QAAQ,GAAG,MAAMrB,aAAa,CAACsB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;;IAE7D;IACA,MAAML,cAAc,GAAGI,QAAQ,CAACE,IAAI,CAACb,KAAK;;IAE1C;IACAC,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEP,cAAc,CAAC;IAC7C,MAAMJ,eAAe,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAGM,QAAQ,CAACE,IAAI,CAACE,SAAS,GAAG,IAAI,CAAC,CAAC;IACrEd,YAAY,CAACa,OAAO,CAAC,iBAAiB,EAAEX,eAAe,CAAC;IAExD,OAAOI,cAAc;EACvB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,MAAM,IAAIM,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF;AAEA,eAAe1B,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}