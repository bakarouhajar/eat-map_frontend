{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\ReactProjects\\\\restaurants\\\\src\\\\components\\\\City.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Table } from 'react-bootstrap';\nimport { Pagination } from 'react-bootstrap';\nimport \"../style/city.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst City = () => {\n  _s();\n  // État pour stocker la liste des cities \n  const [cities, setCities] = useState([]);\n\n  // État pour stocker le numéro de la page active\n  const [activePage, setActivePage] = useState(1);\n\n  // Constante pour stocker le nombre de villes à afficher par page\n  const citiesPerPage = 20;\n\n  // Fonction pour récupérer la liste des cities depuis le backend \n  const fetchCities = async () => {\n    try {\n      const response = await axios.get('/api/villes');\n      setCities(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const getCityById = async id => {\n    try {\n      const response = await axios.get(`/api/villes/${id}`);\n      setCityId(response.data.id);\n      setCityName(response.data.name);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const addCity = async () => {\n    try {\n      const response = await axios.post('/api/villes', {\n        name: cityName\n      });\n      setCities([...cities, response.data]);\n      setCityName('');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Effet pour charger les cities au montage du composant \n  useEffect(() => {\n    fetchCities();\n  }, []);\n\n  // Calcul du nombre de pages\n  const pageCount = Math.ceil(cities.length / citiesPerPage);\n\n  // Fonction pour récupérer les villes de la page active\n  const getCitiesForPage = () => {\n    const startIndex = (activePage - 1) * citiesPerPage;\n    const endIndex = startIndex + citiesPerPage;\n    return cities.slice(startIndex, endIndex);\n  };\n\n  // Fonction pour changer de page\n  const handlePageChange = pageNumber => {\n    setActivePage(pageNumber);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"city-container\",\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        style: {\n          background: '#9C9C9C'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Num\\xE9ro\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Nom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: getCitiesForPage().map((city, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: city.nom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, city.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      className: \"pagination\",\n      children: Array.from({\n        length: pageCount\n      }, (_, index) => index + 1).map(pageNumber => /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        active: pageNumber === activePage,\n        onClick: () => handlePageChange(pageNumber),\n        children: pageNumber\n      }, pageNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(City, \"cT7cgpQbojXrYjgJDlT7vELcGgA=\");\n_c = City;\nexport default City;\nvar _c;\n$RefreshReg$(_c, \"City\");","map":{"version":3,"names":["React","useState","useEffect","axios","Table","Pagination","jsxDEV","_jsxDEV","City","_s","cities","setCities","activePage","setActivePage","citiesPerPage","fetchCities","response","get","data","error","console","getCityById","id","setCityId","setCityName","name","addCity","post","cityName","pageCount","Math","ceil","length","getCitiesForPage","startIndex","endIndex","slice","handlePageChange","pageNumber","className","children","striped","bordered","hover","style","background","fileName","_jsxFileName","lineNumber","columnNumber","map","city","index","nom","Array","from","_","Item","active","onClick","_c","$RefreshReg$"],"sources":["C:/Users/hp/ReactProjects/restaurants/src/components/City.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; \r\nimport axios from 'axios'; \r\nimport { Table } from 'react-bootstrap';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport \"../style/city.css\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst City = () => { \r\n  // État pour stocker la liste des cities \r\n  const [cities, setCities] = useState([]);\r\n  \r\n  // État pour stocker le numéro de la page active\r\n  const [activePage, setActivePage] = useState(1);\r\n\r\n  // Constante pour stocker le nombre de villes à afficher par page\r\n  const citiesPerPage = 20;\r\n\r\n  // Fonction pour récupérer la liste des cities depuis le backend \r\n  const fetchCities = async () => { \r\n    try { \r\n      const response = await axios.get('/api/villes'); \r\n      setCities(response.data); \r\n    } catch (error) { \r\n      console.error(error); \r\n    } \r\n  }; \r\n\r\n  const getCityById = async (id) => { \r\n    try { \r\n    const response = await axios.get(`/api/villes/${id}`); \r\n    setCityId(response.data.id); \r\n    setCityName(response.data.name); \r\n    } catch (error) { \r\n    console.error(error); \r\n    } \r\n   }; \r\n\r\n   const addCity = async () => { \r\n    try { \r\n    const response = await axios.post('/api/villes', { name: cityName }); \r\n    setCities([...cities, response.data]); \r\n    setCityName(''); \r\n    } catch (error) { \r\n    console.error(error); \r\n    } \r\n   }; \r\n  \r\n  // Effet pour charger les cities au montage du composant \r\n  useEffect(() => { \r\n    fetchCities(); \r\n  }, []); \r\n\r\n  // Calcul du nombre de pages\r\n  const pageCount = Math.ceil(cities.length / citiesPerPage);\r\n\r\n  // Fonction pour récupérer les villes de la page active\r\n  const getCitiesForPage = () => {\r\n    const startIndex = (activePage - 1) * citiesPerPage;\r\n    const endIndex = startIndex + citiesPerPage;\r\n    return cities.slice(startIndex, endIndex);\r\n  }\r\n\r\n  // Fonction pour changer de page\r\n  const handlePageChange = (pageNumber) => {\r\n    setActivePage(pageNumber);\r\n  }\r\n\r\n  return ( \r\n    <div className=\"city-container\">\r\n      <Table striped bordered hover> \r\n        <thead style={{background : '#9C9C9C'}}> \r\n          <tr> \r\n            <th>Numéro</th> \r\n            <th>Nom</th> \r\n            {/* Ajoutez d'autres en-têtes de colonne selon vos besoins */} \r\n          </tr> \r\n        </thead> \r\n        <tbody> \r\n          {getCitiesForPage().map((city, index) => ( \r\n            <tr key={city.id}> \r\n              <td>{index + 1}</td> \r\n              <td>{city.nom}</td> \r\n              {/* Ajoutez d'autres cellules de données selon vos besoins */} \r\n            </tr> \r\n          ))} \r\n        </tbody> \r\n      </Table>\r\n      <Pagination className=\"pagination\" >\r\n        {Array.from({ length: pageCount }, (_, index) => index + 1).map(pageNumber => (\r\n          <Pagination.Item key={pageNumber} active={pageNumber === activePage} onClick={() => handlePageChange(pageNumber)}\r\n          >\r\n            {pageNumber}\r\n          </Pagination.Item>\r\n        ))}\r\n      </Pagination>\r\n    </div>\r\n  );\r\n}; \r\n\r\nexport default City;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}