{"ast":null,"code":"import axios from 'axios';\nimport JwtService from 'path/to/JwtService';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080/',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.request.use(async config => {\n  let token = localStorage.getItem('token');\n  if (token) {\n    // Check if the token is expired\n    const isTokenExpired = JwtService.isTokenExpired(token);\n    if (isTokenExpired) {\n      // Token is expired, delete the existing token and generate a new one\n      localStorage.removeItem('token');\n\n      // Generate a new token\n      const userDetails = {\n        // Provide necessary user details\n      };\n      token = JwtService.generateToken(userDetails);\n\n      // Store the new token in localStorage\n      localStorage.setItem('token', token);\n    }\n\n    // Set the Authorization header with the new token\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","JwtService","axiosInstance","create","baseURL","timeout","headers","Accept","interceptors","request","use","config","token","localStorage","getItem","isTokenExpired","removeItem","userDetails","generateToken","setItem","Authorization"],"sources":["C:/Users/hp/ReactProjects/restaurants/src/components/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\r\nimport JwtService from 'path/to/JwtService';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://localhost:8080/',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(async (config) => {\r\n  let token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Check if the token is expired\r\n    const isTokenExpired = JwtService.isTokenExpired(token);\r\n    if (isTokenExpired) {\r\n      // Token is expired, delete the existing token and generate a new one\r\n      localStorage.removeItem('token');\r\n\r\n      // Generate a new token\r\n      const userDetails = {\r\n        // Provide necessary user details\r\n      };\r\n      token = JwtService.generateToken(userDetails);\r\n\r\n      // Store the new token in localStorage\r\n      localStorage.setItem('token', token);\r\n    }\r\n\r\n    // Set the Authorization header with the new token\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,oBAAoB;AAE3C,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAEFL,aAAa,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EACvD,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACzC,IAAIF,KAAK,EAAE;IACT;IACA,MAAMG,cAAc,GAAGd,UAAU,CAACc,cAAc,CAACH,KAAK,CAAC;IACvD,IAAIG,cAAc,EAAE;MAClB;MACAF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;;MAEhC;MACA,MAAMC,WAAW,GAAG;QAClB;MAAA,CACD;MACDL,KAAK,GAAGX,UAAU,CAACiB,aAAa,CAACD,WAAW,CAAC;;MAE7C;MACAJ,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEP,KAAK,CAAC;IACtC;;IAEA;IACAD,MAAM,CAACL,OAAO,CAACc,aAAa,GAAI,UAASR,KAAM,EAAC;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,eAAeT,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}