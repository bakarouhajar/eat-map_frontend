{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\ReactProjects\\\\restaurants\\\\src\\\\components\\\\City.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst City = () => {\n  _s();\n  // État pour stocker la liste des cities \n  const [cities, setCities] = useState([]);\n\n  // Fonction pour récupérer la liste des cities depuis le backend \n  const fetchCities = async () => {\n    try {\n      const response = await axios.get('/api/villes');\n      setCities(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Effet pour charger les cities au montage du composant \n  useEffect(() => {\n    fetchCities();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"#\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: cities.map((city, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: city.nom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)]\n      }, city.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 13\n  }, this);\n};\n_s(City, \"DiWQVw0ar2n3PLd56i1Tx+k2gPg=\");\n_c = City;\nexport default City;\nvar _c;\n$RefreshReg$(_c, \"City\");","map":{"version":3,"names":["React","useState","useEffect","axios","Table","jsxDEV","_jsxDEV","City","_s","cities","setCities","fetchCities","response","get","data","error","console","striped","bordered","hover","children","fileName","_jsxFileName","lineNumber","columnNumber","map","city","index","nom","id","_c","$RefreshReg$"],"sources":["C:/Users/hp/ReactProjects/restaurants/src/components/City.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; \r\nimport axios from 'axios'; \r\nimport { Table } from 'react-bootstrap';\r\nconst City = () => { \r\n    // État pour stocker la liste des cities \r\n    const [cities, setCities] = useState([]); \r\n    \r\n    // Fonction pour récupérer la liste des cities depuis le backend \r\n    const fetchCities = async () => { \r\n    try { \r\n    const response = await axios.get('/api/villes'); \r\n    setCities(response.data); \r\n    } catch (error) { \r\n    console.error(error); \r\n    } \r\n    }; \r\n    \r\n    // Effet pour charger les cities au montage du composant \r\n    useEffect(() => { \r\n        fetchCities(); \r\n        }, []); \r\n        \r\n        return ( \r\n            <Table striped bordered hover> \r\n            <thead> \r\n            <tr> \r\n            <th>#</th> \r\n            <th>Name</th> \r\n            {/* Ajoutez d'autres en-têtes de colonne selon vos besoins */} \r\n            </tr> \r\n            </thead> \r\n            <tbody> \r\n            {cities.map((city, index) => ( \r\n            <tr key={city.id}> \r\n            <td>{index + 1}</td> \r\n            <td>{city.nom}</td> \r\n            {/* Ajoutez d'autres cellules de données selon vos besoins */} \r\n            </tr> \r\n            ))} \r\n            </tbody> \r\n            </Table> \r\n            );\r\n       }; \r\n        \r\nexport default City;    "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACJ,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,aAAa,CAAC;MAC/CH,SAAS,CAACE,QAAQ,CAACE,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAChBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB;EACA,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACZS,WAAW,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA,CAACF,KAAK;IAACa,OAAO;IAACC,QAAQ;IAACC,KAAK;IAAAC,QAAA,gBAC7Bd,OAAA;MAAAc,QAAA,eACAd,OAAA;QAAAc,QAAA,gBACAd,OAAA;UAAAc,QAAA,EAAI;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,eACVlB,OAAA;UAAAc,QAAA,EAAI;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAER;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACG,eACRlB,OAAA;MAAAc,QAAA,EACCX,MAAM,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACxBrB,OAAA;QAAAc,QAAA,gBACAd,OAAA;UAAAc,QAAA,EAAKO,KAAK,GAAG;QAAC;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,eACpBlB,OAAA;UAAAc,QAAA,EAAKM,IAAI,CAACE;QAAG;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM;MAAA,GAFVE,IAAI,CAACG,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAKf;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACM;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEb,CAAC;AAAChB,EAAA,CAvCHD,IAAI;AAAAuB,EAAA,GAAJvB,IAAI;AAyCV,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}