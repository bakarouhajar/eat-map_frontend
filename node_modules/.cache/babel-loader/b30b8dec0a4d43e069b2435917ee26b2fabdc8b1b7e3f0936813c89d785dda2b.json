{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\ReactProjects\\\\restaurants\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport axiosInstance from './axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = () => {\n  _s();\n  const mapRef = useRef(null);\n  useEffect(() => {\n    // Create the map instance\n    const map = L.map(mapRef.current).setView([0, 0], 13); // Default center\n\n    // Add the tile layer from OpenStreetMap\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: 'Map data © OpenStreetMap contributors'\n    }).addTo(map);\n\n    // Fetch restaurant data from the backend\n    const fetchRestaurants = async () => {\n      try {\n        const response = await axiosInstance.get('/api/restaurants');\n        const restaurants = response.data;\n\n        // Iterate over the restaurants and add markers to the map\n        restaurants.forEach(restaurant => {\n          const {\n            latitude,\n            longitude\n          } = restaurant;\n\n          // Create a marker and add it to the map\n          L.marker([latitude, longitude]).addTo(map);\n        });\n      } catch (error) {\n        console.error('Error fetching restaurants:', error);\n      }\n    };\n    fetchRestaurants();\n\n    // Get the user's current location\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n\n        // Set the map view to the user's current location\n        map.setView([latitude, longitude], 13);\n      }, error => {\n        console.error('Error getting current location:', error);\n      });\n    }\n\n    // Event listener for click events on the map\n    const handleMapClick = event => {\n      const {\n        lat,\n        lng\n      } = event.latlng;\n\n      // Use the lat and lng values to add a restaurant or perform other actions\n      console.log('Clicked coordinates:', lat, lng);\n    };\n    map.on('click', handleMapClick);\n    return () => {\n      // Clean up the map when the component is unmounted\n      map.off('click', handleMapClick);\n      map.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: '100%',\n      height: '400px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n};\n_s(Map, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","L","axiosInstance","jsxDEV","_jsxDEV","Map","_s","mapRef","map","current","setView","tileLayer","attribution","addTo","fetchRestaurants","response","get","restaurants","data","forEach","restaurant","latitude","longitude","marker","error","console","navigator","geolocation","getCurrentPosition","position","coords","handleMapClick","event","lat","lng","latlng","log","on","off","remove","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hp/ReactProjects/restaurants/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport axiosInstance from './axiosInstance';\r\n\r\nconst Map = () => {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Create the map instance\r\n    const map = L.map(mapRef.current).setView([0, 0], 13); // Default center\r\n\r\n    // Add the tile layer from OpenStreetMap\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: 'Map data © OpenStreetMap contributors',\r\n    }).addTo(map);\r\n\r\n    // Fetch restaurant data from the backend\r\n    const fetchRestaurants = async () => {\r\n      try {\r\n        const response = await axiosInstance.get('/api/restaurants');\r\n        const restaurants = response.data;\r\n\r\n        // Iterate over the restaurants and add markers to the map\r\n        restaurants.forEach((restaurant) => {\r\n          const { latitude, longitude } = restaurant;\r\n\r\n          // Create a marker and add it to the map\r\n          L.marker([latitude, longitude]).addTo(map);\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching restaurants:', error);\r\n      }\r\n    };\r\n\r\n    fetchRestaurants();\r\n\r\n    // Get the user's current location\r\n    if ('geolocation' in navigator) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n\r\n          // Set the map view to the user's current location\r\n          map.setView([latitude, longitude], 13);\r\n        },\r\n        (error) => {\r\n          console.error('Error getting current location:', error);\r\n        }\r\n      );\r\n    }\r\n\r\n    // Event listener for click events on the map\r\n    const handleMapClick = (event) => {\r\n      const { lat, lng } = event.latlng;\r\n\r\n      // Use the lat and lng values to add a restaurant or perform other actions\r\n      console.log('Clicked coordinates:', lat, lng);\r\n    };\r\n\r\n    map.on('click', handleMapClick);\r\n\r\n    return () => {\r\n      // Clean up the map when the component is unmounted\r\n      map.off('click', handleMapClick);\r\n      map.remove();\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mapRef} style={{ width: '100%', height: '400px' }} />;\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,MAAM,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,GAAG,GAAGP,CAAC,CAACO,GAAG,CAACD,MAAM,CAACE,OAAO,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAEvD;IACAT,CAAC,CAACU,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;IACf,CAAC,CAAC,CAACC,KAAK,CAACL,GAAG,CAAC;;IAEb;IACA,MAAMM,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,aAAa,CAACc,GAAG,CAAC,kBAAkB,CAAC;QAC5D,MAAMC,WAAW,GAAGF,QAAQ,CAACG,IAAI;;QAEjC;QACAD,WAAW,CAACE,OAAO,CAAEC,UAAU,IAAK;UAClC,MAAM;YAAEC,QAAQ;YAAEC;UAAU,CAAC,GAAGF,UAAU;;UAE1C;UACAnB,CAAC,CAACsB,MAAM,CAAC,CAACF,QAAQ,EAAEC,SAAS,CAAC,CAAC,CAACT,KAAK,CAACL,GAAG,CAAC;QAC5C,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAEDV,gBAAgB,EAAE;;IAElB;IACA,IAAI,aAAa,IAAIY,SAAS,EAAE;MAC9BA,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;QACZ,MAAM;UAAER,QAAQ;UAAEC;QAAU,CAAC,GAAGO,QAAQ,CAACC,MAAM;;QAE/C;QACAtB,GAAG,CAACE,OAAO,CAAC,CAACW,QAAQ,EAAEC,SAAS,CAAC,EAAE,EAAE,CAAC;MACxC,CAAC,EACAE,KAAK,IAAK;QACTC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD,CAAC,CACF;IACH;;IAEA;IACA,MAAMO,cAAc,GAAIC,KAAK,IAAK;MAChC,MAAM;QAAEC,GAAG;QAAEC;MAAI,CAAC,GAAGF,KAAK,CAACG,MAAM;;MAEjC;MACAV,OAAO,CAACW,GAAG,CAAC,sBAAsB,EAAEH,GAAG,EAAEC,GAAG,CAAC;IAC/C,CAAC;IAED1B,GAAG,CAAC6B,EAAE,CAAC,OAAO,EAAEN,cAAc,CAAC;IAE/B,OAAO,MAAM;MACX;MACAvB,GAAG,CAAC8B,GAAG,CAAC,OAAO,EAAEP,cAAc,CAAC;MAChCvB,GAAG,CAAC+B,MAAM,EAAE;IACd,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOnC,OAAA;IAAKoC,GAAG,EAAEjC,MAAO;IAACkC,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACxE,CAAC;AAACzC,EAAA,CAjEID,GAAG;AAAA2C,EAAA,GAAH3C,GAAG;AAmET,eAAeA,GAAG;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}