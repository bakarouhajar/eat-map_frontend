{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\ReactProjects\\\\restaurants\\\\src\\\\components\\\\City.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Table } from 'react-bootstrap';\nimport { Pagination } from 'react-bootstrap';\nimport \"../style/city.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst City = () => {\n  _s();\n  // État pour stocker la liste des cities \n  const [cities, setCities] = useState([]);\n\n  // État pour stocker le numéro de la page active\n  const [activePage, setActivePage] = useState(1);\n\n  // Constante pour stocker le nombre de villes à afficher par page\n  const citiesPerPage = 20;\n\n  // Fonction pour récupérer la liste des cities depuis le backend \n  const fetchCities = async () => {\n    try {\n      const response = await axios.get('/api/villes');\n      setCities(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Effet pour charger les cities au montage du composant \n  useEffect(() => {\n    fetchCities();\n  }, []);\n\n  // Calcul du nombre de pages\n  const pageCount = Math.ceil(cities.length / citiesPerPage);\n\n  // Fonction pour récupérer les villes de la page active\n  const getCitiesForPage = () => {\n    const startIndex = (activePage - 1) * citiesPerPage;\n    const endIndex = startIndex + citiesPerPage;\n    return cities.slice(startIndex, endIndex);\n  };\n\n  // Fonction pour changer de page\n  const handlePageChange = pageNumber => {\n    setActivePage(pageNumber);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"city-container\",\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Num\\xE9ro\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Nom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: getCitiesForPage().map((city, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: city.nom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, city.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      className: \"pagination\",\n      children: Array.from({\n        length: pageCount\n      }, (_, index) => index + 1).map(pageNumber => /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        active: pageNumber === activePage,\n        onClick: () => handlePageChange(pageNumber),\n        style: {\n          backgroundColor: pageNumber === activePage ? \"#EA630C\" : \"white\",\n          color: pageNumber === activePage ? \"white\" : \"black\",\n          border: pageNumber === activePage ? \"none\" : \"1px solid #EA630C6\"\n        },\n        children: pageNumber\n      }, pageNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(City, \"cT7cgpQbojXrYjgJDlT7vELcGgA=\");\n_c = City;\nexport default City;\nvar _c;\n$RefreshReg$(_c, \"City\");","map":{"version":3,"names":["React","useState","useEffect","axios","Table","Pagination","jsxDEV","_jsxDEV","City","_s","cities","setCities","activePage","setActivePage","citiesPerPage","fetchCities","response","get","data","error","console","pageCount","Math","ceil","length","getCitiesForPage","startIndex","endIndex","slice","handlePageChange","pageNumber","className","children","striped","bordered","hover","fileName","_jsxFileName","lineNumber","columnNumber","map","city","index","nom","id","Array","from","_","Item","active","onClick","style","backgroundColor","color","border","_c","$RefreshReg$"],"sources":["C:/Users/hp/ReactProjects/restaurants/src/components/City.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; \r\nimport axios from 'axios'; \r\nimport { Table } from 'react-bootstrap';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport \"../style/city.css\"\r\n\r\nconst City = () => { \r\n  // État pour stocker la liste des cities \r\n  const [cities, setCities] = useState([]);\r\n  \r\n  // État pour stocker le numéro de la page active\r\n  const [activePage, setActivePage] = useState(1);\r\n\r\n  // Constante pour stocker le nombre de villes à afficher par page\r\n  const citiesPerPage = 20;\r\n\r\n  // Fonction pour récupérer la liste des cities depuis le backend \r\n  const fetchCities = async () => { \r\n    try { \r\n      const response = await axios.get('/api/villes'); \r\n      setCities(response.data); \r\n    } catch (error) { \r\n      console.error(error); \r\n    } \r\n  }; \r\n  \r\n  // Effet pour charger les cities au montage du composant \r\n  useEffect(() => { \r\n    fetchCities(); \r\n  }, []); \r\n\r\n  // Calcul du nombre de pages\r\n  const pageCount = Math.ceil(cities.length / citiesPerPage);\r\n\r\n  // Fonction pour récupérer les villes de la page active\r\n  const getCitiesForPage = () => {\r\n    const startIndex = (activePage - 1) * citiesPerPage;\r\n    const endIndex = startIndex + citiesPerPage;\r\n    return cities.slice(startIndex, endIndex);\r\n  }\r\n\r\n  // Fonction pour changer de page\r\n  const handlePageChange = (pageNumber) => {\r\n    setActivePage(pageNumber);\r\n  }\r\n\r\n  return ( \r\n    <div className=\"city-container\">\r\n      <Table striped bordered hover> \r\n        <thead> \r\n          <tr> \r\n            <th>Numéro</th> \r\n            <th>Nom</th> \r\n            {/* Ajoutez d'autres en-têtes de colonne selon vos besoins */} \r\n          </tr> \r\n        </thead> \r\n        <tbody> \r\n          {getCitiesForPage().map((city, index) => ( \r\n            <tr key={city.id}> \r\n              <td>{index + 1}</td> \r\n              <td>{city.nom}</td> \r\n              {/* Ajoutez d'autres cellules de données selon vos besoins */} \r\n            </tr> \r\n          ))} \r\n        </tbody> \r\n      </Table>\r\n      <Pagination className=\"pagination\" >\r\n        {Array.from({ length: pageCount }, (_, index) => index + 1).map(pageNumber => (\r\n          <Pagination.Item key={pageNumber} active={pageNumber === activePage} onClick={() => handlePageChange(pageNumber)}\r\n          style={{\r\n            backgroundColor: pageNumber === activePage ? \"#EA630C\" : \"white\",\r\n            color: pageNumber === activePage ? \"white\" : \"black\",\r\n            border: pageNumber === activePage ? \"none\" : \"1px solid #EA630C6\",\r\n          }}>\r\n            {pageNumber}\r\n          </Pagination.Item>\r\n        ))}\r\n      </Pagination>\r\n    </div>\r\n  );\r\n}; \r\n\r\nexport default City;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}